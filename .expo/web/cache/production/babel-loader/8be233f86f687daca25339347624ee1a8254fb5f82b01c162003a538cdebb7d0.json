{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{StatusBar}from'expo-status-bar';import React,{useRef,useEffect,useState}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import Alert from\"react-native-web/dist/exports/Alert\";import Button from\"react-native-web/dist/exports/Button\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var showAlert=function showAlert(){return Alert.alert(\"Test Alert\",\"This is a test alert\");};console.log(\"Alert\");export default function App(){var translation=useRef(new Animated.Value(0)).current;var _useState=useState(colorChange),_useState2=_slicedToArray(_useState,2),bgColor=_useState2[0],setbgColor=_useState2[1];var animRight=function animRight(){return Animated.timing(translation,{toValue:50}).start();};function colorChange(){var color='black';var x=Math.random();console.log(x);if(x>.5){color='red';}else{color='blue';}return color;}return _jsxs(View,{style:styles.container,children:[_jsx(Text,{children:\"Hello\"}),_jsx(Animated.View,{style:{width:100,height:100,backgroundColor:bgColor,transform:[{translateY:translation}]}}),_jsx(TouchableOpacity,{style:{backgroundColor:'gray',borderRadius:'20px',padding:'10px',marginTop:'15px',width:'175px'},onPress:showAlert(),children:_jsx(Text,{style:{textAlign:'center',fontWeight:'bold',fontSize:'20px'},children:\"PRESS ME\"})}),_jsx(StatusBar,{style:\"auto\"})]});}var styles=StyleSheet.create({container:{flex:1,backgroundColor:'#fff',alignItems:'center',justifyContent:'center'}});","map":{"version":3,"names":["StatusBar","React","useRef","useEffect","useState","Animated","StyleSheet","Text","View","Alert","Button","TouchableOpacity","jsx","_jsx","jsxs","_jsxs","showAlert","alert","console","log","App","translation","Value","current","_useState","colorChange","_useState2","_slicedToArray","bgColor","setbgColor","animRight","timing","toValue","start","color","x","Math","random","style","styles","container","children","width","height","backgroundColor","transform","translateY","borderRadius","padding","marginTop","onPress","textAlign","fontWeight","fontSize","create","flex","alignItems","justifyContent"],"sources":["C:/Users/derri/OneDrive/Documents/MyReactApps/my-project1/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Animated, StyleSheet, Text, View, Alert, Button, TouchableOpacity } from 'react-native';\n\nconst showAlert = () =>\n  Alert.alert(\"Test Alert\", \"This is a test alert\");\n  console.log(\"Alert\");\n\nexport default function App() {\n  const translation = useRef(new Animated.Value(0)).current;\n  const [bgColor, setbgColor] = useState(colorChange);\n  const animRight = () => Animated.timing(translation, {toValue: 50}).start();\n\n  function colorChange(){\n    var color = 'black';\n    var x = Math.random();\n    console.log(x);\n    if (x > .5) {\n      color = 'red';\n    } else {\n      color = 'blue';\n    }\n    return color;\n  }\n\n  //const setbgColor = () => boxColor='red';\n  return (\n    <View style={styles.container}>\n      <Text>Hello</Text>\n      <Animated.View style={{width: 100, height: 100, backgroundColor: bgColor, transform: [{ translateY: translation,}]}}></Animated.View>\n      <TouchableOpacity style={{backgroundColor: 'gray', borderRadius: '20px', padding: '10px', marginTop: '15px', width: '175px'}}onPress={showAlert()}><Text style={{textAlign: 'center', fontWeight: 'bold', fontSize: '20px'}}>PRESS ME</Text></TouchableOpacity>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"mappings":"iEAAA,OAASA,SAAS,KAAQ,iBAAiB,CAC3C,MAAO,CAAAC,KAAK,EAAIC,MAAM,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,QAAA,qDAAAC,UAAA,uDAAAC,IAAA,iDAAAC,IAAA,iDAAAC,KAAA,kDAAAC,MAAA,mDAAAC,gBAAA,6DAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAG3D,GAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAA,QACb,CAAAP,KAAK,CAACQ,KAAK,CAAC,YAAY,CAAE,sBAAsB,CAAC,GACjDC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC,CAEtB,cAAe,SAAS,CAAAC,GAAGA,CAAA,CAAG,CAC5B,GAAM,CAAAC,WAAW,CAAGnB,MAAM,CAAC,GAAI,CAAAG,QAAQ,CAACiB,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO,CACzD,IAAAC,SAAA,CAA8BpB,QAAQ,CAACqB,WAAW,CAAC,CAAAC,UAAA,CAAAC,cAAA,CAAAH,SAAA,IAA5CI,OAAO,CAAAF,UAAA,IAAEG,UAAU,CAAAH,UAAA,IAC1B,GAAM,CAAAI,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAA,QAAS,CAAAzB,QAAQ,CAAC0B,MAAM,CAACV,WAAW,CAAE,CAACW,OAAO,CAAE,EAAE,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,GAE3E,QAAS,CAAAR,WAAWA,CAAA,CAAE,CACpB,GAAI,CAAAS,KAAK,CAAG,OAAO,CACnB,GAAI,CAAAC,CAAC,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CACrBnB,OAAO,CAACC,GAAG,CAACgB,CAAC,CAAC,CACd,GAAIA,CAAC,CAAG,EAAE,CAAE,CACVD,KAAK,CAAG,KAAK,CACf,CAAC,IAAM,CACLA,KAAK,CAAG,MAAM,CAChB,CACA,MAAO,CAAAA,KAAK,CACd,CAGA,MACE,CAAAnB,KAAA,CAACP,IAAI,EAAC8B,KAAK,CAAEC,MAAM,CAACC,SAAU,CAAAC,QAAA,EAC5B5B,IAAA,CAACN,IAAI,EAAAkC,QAAA,CAAC,OAAK,CAAM,CAAC,CAClB5B,IAAA,CAACR,QAAQ,CAACG,IAAI,EAAC8B,KAAK,CAAE,CAACI,KAAK,CAAE,GAAG,CAAEC,MAAM,CAAE,GAAG,CAAEC,eAAe,CAAEhB,OAAO,CAAEiB,SAAS,CAAE,CAAC,CAAEC,UAAU,CAAEzB,WAAY,CAAC,CAAC,CAAE,CAAgB,CAAC,CACrIR,IAAA,CAACF,gBAAgB,EAAC2B,KAAK,CAAE,CAACM,eAAe,CAAE,MAAM,CAAEG,YAAY,CAAE,MAAM,CAAEC,OAAO,CAAE,MAAM,CAAEC,SAAS,CAAE,MAAM,CAAEP,KAAK,CAAE,OAAO,CAAE,CAAAQ,OAAO,CAAElC,SAAS,CAAC,CAAE,CAAAyB,QAAA,CAAC5B,IAAA,CAACN,IAAI,EAAC+B,KAAK,CAAE,CAACa,SAAS,CAAE,QAAQ,CAAEC,UAAU,CAAE,MAAM,CAAEC,QAAQ,CAAE,MAAM,CAAE,CAAAZ,QAAA,CAAC,UAAQ,CAAM,CAAC,CAAkB,CAAC,CAC/P5B,IAAA,CAACb,SAAS,EAACsC,KAAK,CAAC,MAAM,CAAE,CAAC,EACtB,CAAC,CAEX,CAEA,GAAM,CAAAC,MAAM,CAAGjC,UAAU,CAACgD,MAAM,CAAC,CAC/Bd,SAAS,CAAE,CACTe,IAAI,CAAE,CAAC,CACPX,eAAe,CAAE,MAAM,CACvBY,UAAU,CAAE,QAAQ,CACpBC,cAAc,CAAE,QAClB,CACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}